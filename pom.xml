<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>demo0825</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>demo0825</name>
    <description>Demo project for Spring Boot</description>

    <!--要成为一个spring boot项目，
    首先就必须在pom.xml中继承spring-boot-starter-parent，同时指定其版本-->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.4.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <!--ctrl+左键点击上面的spring-boot-starter-parent可以查看其源码。
    可以看出，spring boot项目默认的jdk版本是1.8，默认的编码是utf-8。
    如果要修改这些环境参数，比如将jdk版本改成1.6，只需要在项目的pom.xml文件中如下覆盖要修改的参数-->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>  <!--将jdk版本改成1.8-->
    </properties>

    <dependencies>
        <!--spring-boot-starter-parent的源码中又继承了spring-boot-dependencies.
        <properties>中的内容是用来配置spring boot自动引入的各个jar包的版本，
        如果想用别的版本替换里面的版本，和修改JDK一样，只需要在我们自己项目中的pom.xml文件中覆盖相关参数。
        (spring-boot-dependencies)<dependencyManagement>中的内容，
        就是为什么我们自己项目中配置spring boot组件依赖时，可以不用配置版本,如下-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!--insert-->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.8.5</version>
        </dependency>
        <!-- 数据操作  -->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>1.3.1</version>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <!--默认情况下，maven打包生成的jar文件是用来给其他项目依赖用的，是无法直接运行的。
            spring boot根据自生需要，提供了一个插件来生成可执行jar文件。
            在spring-boot-starter-parent源码中可以找到。
            我们只需要在自己项目的pom.xml中声明这个插件，就会生效，如下-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>


</project>
